
package blockplus.model;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

import blockplus.imports.BoardEncoding;
import blockplus.imports.SidesEncoding;
import blockplus.transport.protocol.IMessage;
import blockplus.transport.protocol.MessageDecoder;

import com.google.common.collect.Sets;
import com.google.gson.JsonObject;
import components.cells.IPosition;
import components.cells.Positions;

public class OptionsSupplierTest {

    @Test
    public void testGet() {
        final String expected = "" +
                "[[[0, 0]], " +
                "[[0, 0], [0, 1]], " +
                "[[0, 0], [1, 0]], " +
                "[[0, 0], [0, 1], [0, 2]], " +
                "[[0, 0], [1, 0], [2, 0]], " +
                "[[0, 0], [0, 1], [1, 0]], " +
                "[[0, 0], [0, 1], [1, 1]], " +
                "[[0, 0], [1, 0], [1, 1]], " +
                "[[0, 0], [0, 1], [0, 2], [0, 3]], " +
                "[[0, 0], [1, 0], [2, 0], [3, 0]], " +
                "[[0, 0], [0, 1], [0, 2], [1, 0]], " +
                "[[0, 0], [0, 1], [0, 2], [1, 2]], " +
                "[[0, 0], [1, 0], [2, 0], [2, 1]], " +
                "[[0, 0], [0, 1], [1, 0], [2, 0]], " +
                "[[0, 0], [0, 1], [1, 1], [2, 1]], " +
                "[[0, 0], [1, 0], [1, 1], [1, 2]], " +
                "[[0, 0], [0, 1], [0, 2], [1, 1]], " +
                "[[0, 0], [1, 0], [1, 1], [2, 0]], " +
                "[[0, 0], [0, 1], [1, 0], [1, 1]], " +
                "[[0, 0], [1, 0], [1, 1], [2, 1]], " +
                "[[0, 0], [0, 1], [1, 1], [1, 2]], " +
                "[[0, 0], [0, 1], [0, 2], [0, 3], " +
                "[1, 0]], [[0, 0], [0, 1], [0, 2], " +
                "[0, 3], [1, 3]], [[0, 0], [0, 1], " +
                "[1, 0], [2, 0], [3, 0]], [[0, 0], " +
                "[0, 1], [1, 1], [2, 1], [3, 1]], " +
                "[[0, 0], [1, 0], [1, 1], [1, 2], " +
                "[1, 3]], [[0, 0], [1, 0], [2, 0], " +
                "[3, 0], [3, 1]], [[0, 0], [0, 1], " +
                "[0, 2], [0, 3], [0, 4]], [[0, 0], " +
                "[1, 0], [2, 0], [3, 0], [4, 0]], " +
                "[[0, 0], [0, 1], [0, 2], [1, 2], " +
                "[1, 3]], [[0, 0], [0, 1], [1, 1], " +
                "[1, 2], [1, 3]], [[0, 0], [1, 0], " +
                "[1, 1], [2, 1], [3, 1]], [[0, 0], " +
                "[1, 0], [2, 0], [2, 1], [3, 1]], " +
                "[[0, 0], [0, 1], [0, 2], [1, 1], " +
                "[1, 2]], [[0, 0], [0, 1], [0, 2], " +
                "[1, 0], [1, 1]], [[0, 0], [0, 1], " +
                "[1, 0], [1, 1], [2, 0]], [[0, 0], " +
                "[1, 0], [1, 1], [2, 0], [2, 1]], " +
                "[[0, 0], [0, 1], [1, 0], [1, 1], [1, 2]], " +
                "[[0, 0], [0, 1], [1, 0], [1, 1], [2, 1]], " +
                "[[0, 0], [0, 1], [0, 2], [1, 0], [1, 2]], " +
                "[[0, 0], [0, 1], [1, 0], [2, 0], [2, 1]], " +
                "[[0, 0], [0, 1], [1, 1], [2, 0], [2, 1]], " +
                "[[0, 0], [0, 2], [1, 0], [1, 1], [1, 2]], " +
                "[[0, 0], [0, 1], [0, 2], [0, 3], [1, 1]], " +
                "[[0, 0], [0, 1], [0, 2], [0, 3], [1, 2]], " +
                "[[0, 0], [1, 0], [1, 1], [2, 0], [3, 0]], " +
                "[[0, 0], [1, 0], [2, 0], [2, 1], [3, 0]], " +
                "[[0, 0], [0, 1], [0, 2], [1, 1], [2, 1]], " +
                "[[0, 0], [1, 0], [1, 1], [1, 2], [2, 0]], " +
                "[[0, 0], [0, 1], [0, 2], [1, 0], [2, 0]], " +
                "[[0, 0], [0, 1], [0, 2], [1, 2], [2, 2]], " +
                "[[0, 0], [1, 0], [2, 0], [2, 1], [2, 2]], " +
                "[[0, 0], [1, 0], [1, 1], [2, 1], [2, 2]], " +
                "[[0, 0], [0, 1], [1, 1], [1, 2], [2, 2]], " +
                "[[0, 0], [1, 0], [1, 1], [1, 2], [2, 2]], " +
                "[[0, 0], [0, 1], [1, 1], [2, 1], [2, 2]], " +
                "[[0, 0], [1, 0], [1, 1], [1, 2], [2, 1]], " +
                "[[0, 0], [0, 1], [1, 1], [1, 2], [2, 1]]]";
        final String actual = new Context.Builder().build().options().toList().toString();
        assertEquals(expected, actual);
    }

    @Test
    public void testFixedBug1() {
        final String contextJSON =
                                   "{'type':'update','data':{'color':'Blue','isTerminal':false,'board':{'dimension':{'rows':20,'columns':20},'cells':{'Blue':[0,1,10,11,12,21,22,30,42,48,49,63,64,66,70,82,84,86,87,88,90,91,104,106,111,124,127,128,129,130,145,146,149,166,167,186,188,189,203,204,205,209,223,229,230,243,264,265,266,285,287,288,306,307,308,325,345,347,348,349,350,352,353,354,365,366,371,386,391,392],'Yellow':[3,4,5,8,9,13,14,15,17,18,19,25,28,29,32,34,36,38,39,44,46,47,50,51,52,55,56,57,65,67,68,69,71,73,74,76,85,92,94,95,98,105,112,115,118,119,125,132,133,134,136,137,139,144,151,156,164,171,172,176,177,191,198,211,218,238,257,258,279,297,298,299,319],'Red':[37,58,59,77,79,96,97,99,117,138,157,158,179,193,194,195,199,213,216,219,233,235,236,239,251,252,255,259,272,273,274,277,278,295,296,312,313,315,317,331,332,334,335,337,338,351,356,357,359,367,368,369,370,372,373,374,375,378,379,387,393,398,399],'Green':[60,61,80,81,83,102,122,142,143,148,150,163,165,168,169,170,180,181,182,184,185,187,200,206,207,208,220,241,242,244,245,246,247,248,261,263,269,270,280,281,283,284,290,291,302,304,305,310,321,322,323,326,327,328,329,340,342,344,346,360,361,364,380,381,383,384,385]}},'pieces':{'Blue':2106497,'Yellow':2491396,'Red':2433185,'Green':2986048},'options':{'27':{'8':[[6,7,26,27]]},'45':{'8':[[6,7,26,27]]},'101':{'8':[[100,101,120,121]],'14':[[100,101,120,140,141],[100,101,121,140,141]]}}}}";

        final MessageDecoder messageDecoder = new MessageDecoder();
        final IMessage message = messageDecoder.decode(contextJSON);
        final JsonObject data = message.getData();

        final Colors side = Colors.Blue;
        final BoardEncoding boardEncoding = new BoardEncoding();
        final Board board = boardEncoding.decode(data.get("board").getAsJsonObject());
        final SidesEncoding sidesEncoding = new SidesEncoding();
        final Sides sides = sidesEncoding.decode(data.get("pieces").getAsJsonObject());

        final Context context = new Context(side, sides, board);
        final Options options = context.options();

        final IPosition position = Positions.Position(2, 5);
        assertTrue(Sets.newHashSet(context.board().getLights(side)).contains(position));

        assertFalse(options.byLight().containsKey(position));
    }

}